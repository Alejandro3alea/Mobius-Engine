#include "GraphicsBrowserFiles.h"
#include "Cubemap.h"
#include "GfxMgr.h"
#include "Editor.h"

Resource<Texture>* TextureBrowserFile::GetThumbnail()
{
	return ResourceMgr->Load<Texture>(mPath);
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void TextureBrowserFile::OnDragWidget()
{
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void TextureBrowserFile::OnDropWidget(const ImGuiPayload* payload)
{
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

Resource<Texture>* SkyboxBrowserFile::GetThumbnail()
{
	return Editor->mIcons["HDR"];
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void SkyboxBrowserFile::OnDoubleClickTriggered()
{
	GfxMgr->SetSkybox(mPath);
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void SkyboxBrowserFile::OnDragWidget()
{
	ImGui::SetDragDropPayload("ITEM_PAYLOAD", &mPath, sizeof(mPath)); 
	ImGui::Text("Dragging: %s", mFileName.c_str());
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void SkyboxBrowserFile::OnDropWidget(const ImGuiPayload* payload)
{
	// Is from another ContentBrowserFile
	if (payload)
	{
		std::string* filePath = (std::string*)payload->Data;
	}
	else if (!ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow)) // Is in main scene
	{
		GfxMgr->SetSkybox(mPath);
	}
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

Resource<Texture>* CubemapBrowserFile::GetThumbnail()
{
	return Editor->mIcons["Sky"];
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void CubemapBrowserFile::OnDoubleClickTriggered()
{
	//GfxMgr->SetSkybox(mPath);
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void CubemapBrowserFile::OnDragWidget()
{
	ImGui::SetDragDropPayload("ITEM_PAYLOAD", &mPath, sizeof(mPath));
	ImGui::Text("Dragging: %s", mFileName.c_str());
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void CubemapBrowserFile::OnDropWidget(const ImGuiPayload* payload)
{
	// Is from another ContentBrowserFile
	if (payload)
	{
		std::string* filePath = (std::string*)payload->Data;
	}
	else if (!ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow)) // Is in main scene
	{
		//GfxMgr->SetSkybox(mPath);
	}
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

Resource<Texture>* MaterialBrowserFile::GetThumbnail()
{
	return Editor->mIcons["Material"];
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void MaterialBrowserFile::OnDoubleClickTriggered()
{
	// Work with Trifecta
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void MaterialBrowserFile::OnDragWidget()
{
	ImGui::SetDragDropPayload("ITEM_PAYLOAD", &mPath, sizeof(mPath));
	ImGui::Text("Dragging: %s", mFileName.c_str());
}

//////////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////////

void MaterialBrowserFile::OnDropWidget(const ImGuiPayload* payload)
{
	if (!ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow)) // Is in main scene
	{
	}
}
